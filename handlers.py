import random
import os
import csv
from telegram import Update
from telegram import ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from datetime import datetime
from utils import log_expense
from config import CATEGORIES, random_responses
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–∞—Ä–æ–≤–∞ –∫–æ–∂–∞–Ω—ã–π, –ø–æ—Å—á–∏—Ç–∞—é —Ç–≤–æ–∏ –±–∞–±–∫–∏, –∏ –±—É–¥—É –≤–µ—Å—Ç–∏ —Ç–≤–æ–π –±—é–¥–∂–µ—Ç")
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()#capitalize() # Strip —É–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω–∏–∏ –ø—Ä–æ–±–µ–ª—ã, capitalize –¥–µ–ª–∞–µ—Ç –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑—ã–≥–ª–∞–≤–Ω—É—é
    if text == "/—Å—Ç–∞—Ç—É—Å":
        await status(update, context)
        return
    if text == "üîô –ù–∞–∑–∞–¥":
        context.user_data.pop("pending_category", None)
        await update.message.reply_text("–•*–π —Å —Ç–æ–±–æ–π, –¥–∞–≤–∞–π –ø–æ –Ω–æ–≤–æ–π üí∏")
        return
    if text == "‚úÖ –î–∞":
        pending_category = context.user_data.get("pending_category")
        if pending_category:
            amount = context.user_data.get("last_amount")
            meta = CATEGORIES[pending_category]
            date = datetime.now().strftime('%d.%m.%Y %H:%M')
            username = update.message.from_user.username or "–ë–µ–∑ –Ω–∏–∫–∞"

            log_expense(amount, pending_category, meta, date, username)

            await update.message.reply_text(
                f"–ó–∞–ø–∏—Å–∞–ª: {amount}‚ÇΩ ‚Üí {pending_category} ({meta})\nüïí {date}"
            )
            context.user_data.pop("pending_category", None)
            context.user_data.pop("last_amount", None)

            reply_markup = ReplyKeyboardMarkup([["/—Å—Ç–∞—Ç—É—Å"]], resize_keyboard=True)
            await update.message.reply_text("–ñ–¥—É –Ω–æ–≤—É—é —Å—É–º–º—É üí∏", reply_markup=reply_markup)
            return
        amount = context.user_data.get("pending_amount")
        if amount is None:
            await update.message.reply_text(random.choice(random_responses))
            return
        context.user_data['last_amount'] = amount
        keyboard = [[cat] for cat in CATEGORIES.keys()]
        keyboard.append(["üîô –ù–∞–∑–∞–¥"])
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

        await update.message.reply_text(
        f"–£—á–µ–ª: {amount:.2f}‚ÇΩ.\n–ö—É–¥–∞ —Å–ª–∏–ª?",
        reply_markup=reply_markup
        )
        return
    try:
        amount = float(text.replace(',', '.')) # –°—É–º–º–∞ –≤ —á–∏—Å–ª–æ
        context.user_data['pending_amount'] = amount #–í—Ä–µ–º–µ–Ω–Ω–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∏ —Å—É–º–º—ã –¥–æ –ø–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = [["üîô –ù–∞–∑–∞–¥", "‚úÖ –î–∞"]] #–ö–Ω–æ–ø–∫–∏ –ø–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è - —Å–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ 
        # –∫–Ω–æ–ø–∫–∏ —Å–∫—Ä–æ—é—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è, –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞ –ø–æ–¥—Å—Ç—Ä–æ—è—Ç—Å—è
        reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text( #–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–º—Å
            f"–£—á–µ–ª: {amount}‚ÇΩ.\n–í—Å–µ –≤–µ—Ä–Ω–æ?",
            reply_markup=reply_markup #–í—ã–≤–æ–¥ –∫–Ω–æ–ø–æ–∫
        )
        return
    except ValueError:
        if text == "üîô –ù–∞–∑–∞–¥":
            context.user_data.pop("last_amount", None)
            await update.message.reply.text("–û–∫–µ–π,—Ö*–π. –í–≤–µ–¥–∏ —Å—É–º–º—É –∑–∞–Ω–æ–≤–æ üí∏")
            return
        if text in CATEGORIES:
            amount = context.user_data.get("last_amount")
            if amount is None:
                await update.message.reply_text(random.choice(random_responses))        
                return
            context.user_data['pending_category'] = text
            keyboard = [["üîô –ù–∞–∑–∞–¥", "‚úÖ –î–∞"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
            await update.message.reply_text(
                f"‚ùó–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å: {amount:.2f}‚ÇΩ ‚Üí {text}",
                reply_markup=reply_markup
            )
            return
        else:
            await update.message.reply_text(random.choice(random_responses))
            return
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not os.path.exists("log.csv"):
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞—Ç–∞—Ö –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ")
        return
    now = datetime.now()
    current_month = now.strftime("%m.%Y")
    from collections import defaultdict
    category_totals = defaultdict(float)
    total_sum = 0
    must_sum = 0
    optional_sum = 0
    with open("log.csv", newline="", encoding="utf-8") as f:
        reader = csv.DictReader(f)
        for row in reader:
            try:
                date_obj = datetime.strptime(row["–î–∞—Ç–∞"],"%d.%m.%Y %H:%M")
                row_month = date_obj.strftime("%m.%Y")
                if row_month != current_month:
                    continue
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞—Ç—ã: {row['–î–∞—Ç–∞']}", e)
                continue
            amount = float(row["–°—É–º–º–∞"])
            category = row["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"]
            category = row["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"]
            meta = CATEGORIES.get(category, "–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è") # ‚Üê –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è
            category_totals[category] += amount
            total_sum += amount
            if meta == "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è":
                must_sum += amount
            else:
                optional_sum += amount
    lines = [f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {current_month}:\n"]
    for cat, summ in category_totals.items():
        lines.append(f"{cat}: {summ:.2f}‚ÇΩ")
    lines.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    lines.append(f"üí∞ –í—Å–µ–≥–æ: {total_sum:.2f}‚ÇΩ")
    lines.append(f"‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ: {must_sum:.2f}‚ÇΩ")
    lines.append(f"üåÄ –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ: {optional_sum:.2f}‚ÇΩ")
    await update.message.reply_text("\n".join(lines))